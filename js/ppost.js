// Generated by CoffeeScript 1.11.1
(function() {
  var Emitter, PostMain, PostRenderer, TYPE, electron, remote, webContents,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty,
    slice = [].slice;

  Emitter = require('events');

  electron = require('electron');

  webContents = electron.webContents;

  remote = electron.remote;

  TYPE = '__POST__';

  if (process.type === 'renderer') {
    PostRenderer = (function(superClass) {
      extend(PostRenderer, superClass);

      function PostRenderer() {
        this.fromMain = bind(this.fromMain, this);
        this.dispose = bind(this.dispose, this);
        PostRenderer.__super__.constructor.call(this);
        this.id = remote.getCurrentWebContents().id;
        this.ipc = electron.ipcRenderer;
        this.ipc.on(TYPE, this.fromMain);
        window.addEventListener('beforeunload', this.dispose);
      }

      PostRenderer.prototype.dispose = function() {
        this.ipc.removeListener(TYPE, this.fromMain);
        window.removeEventListener('beforeunload', this.dispose);
        this.win = null;
        this.ipc = null;
        return false;
      };

      PostRenderer.prototype.toAll = function() {
        var args, type;
        type = arguments[0], args = 2 <= arguments.length ? slice.call(arguments, 1) : [];
        return this.ipc.send(TYPE, 'toAll', type, args);
      };

      PostRenderer.prototype.toOthers = function() {
        var args, type;
        type = arguments[0], args = 2 <= arguments.length ? slice.call(arguments, 1) : [];
        return this.ipc.send(TYPE, 'toOthers', type, args);
      };

      PostRenderer.prototype.toMain = function() {
        var args, type;
        type = arguments[0], args = 2 <= arguments.length ? slice.call(arguments, 1) : [];
        return this.ipc.send(TYPE, 'toMain', type, args);
      };

      PostRenderer.prototype.toWin = function() {
        var args, id, type;
        type = arguments[0], id = arguments[1], args = 3 <= arguments.length ? slice.call(arguments, 2) : [];
        return this.ipc.send(TYPE, 'toWin', type, args, id);
      };

      PostRenderer.prototype.toOtherWins = function() {
        var args, type;
        type = arguments[0], args = 2 <= arguments.length ? slice.call(arguments, 1) : [];
        return this.ipc.send(TYPE, 'toOtherWins', type, args);
      };

      PostRenderer.prototype.toAllWins = function() {
        var args, type;
        type = arguments[0], args = 2 <= arguments.length ? slice.call(arguments, 1) : [];
        return this.ipc.send(TYPE, 'toAllWins', type, args);
      };

      PostRenderer.prototype.fromMain = function(event, type, args) {
        args.unshift(type);
        this.emit.apply(this, args);
        return null;
      };

      return PostRenderer;

    })(Emitter);
    module.exports = new PostRenderer();
  } else {
    PostMain = (function(superClass) {
      extend(PostMain, superClass);

      function PostMain() {
        this.fromWin = bind(this.fromWin, this);
        PostMain.__super__.constructor.call(this);
        this.ipc = electron.ipcMain;
        this.ipc.on(TYPE, this.fromWin);
      }

      PostMain.prototype.toAll = function() {
        var args, type;
        type = arguments[0], args = 2 <= arguments.length ? slice.call(arguments, 1) : [];
        return this.sendToWins(type, args) & this.sendToSelf(type, args);
      };

      PostMain.prototype.toWin = function() {
        var args, id, type;
        type = arguments[0], id = arguments[1], args = 3 <= arguments.length ? slice.call(arguments, 2) : [];
        return this.sendToWin(type, args, id);
      };

      PostMain.prototype.toAllWins = function() {
        var args, type;
        type = arguments[0], args = 2 <= arguments.length ? slice.call(arguments, 1) : [];
        return this.sendToWins(type, args);
      };

      PostMain.prototype.sendToSelf = function(type, args) {
        args = args.concat();
        args.unshift(type);
        this.emit.apply(this, args);
        return null;
      };

      PostMain.prototype.sendToWins = function(type, args, except) {
        var content, i, len, ref;
        ref = webContents.getAllWebContents();
        for (i = 0, len = ref.length; i < len; i++) {
          content = ref[i];
          if (content.id !== except) {
            content.send(TYPE, type, args);
          }
        }
        return null;
      };

      PostMain.prototype.sendToWin = function(type, args, id) {
        var content;
        try {
          content = webContents.fromId(id);
          content.send(TYPE, type, args);
        } catch (error) {}
        return null;
      };

      PostMain.prototype.fromWin = function(event, kind, type, args, id) {
        id = id || event.sender.id;
        switch (kind) {
          case 'toMain':
            this.sendToSelf(type, args);
            break;
          case 'toAll':
            this.sendToWins(type, args) & this.sendToSelf(type, args);
            break;
          case 'toOthers':
            this.sendToWins(type, args, id) & this.sendToSelf(type, args);
            break;
          case 'toOtherWins':
            this.sendToWins(type, args, id);
            break;
          case 'toAllWins':
            this.sendToWins(type, args);
            break;
          case 'toWin':
            this.sendToWin(type, args, id);
        }
        return null;
      };

      return PostMain;

    })(Emitter);
    module.exports = new PostMain();
  }

}).call(this);
